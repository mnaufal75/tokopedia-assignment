{"version":3,"sources":["PokemonList.js","PokemonDetail.js","MyPokemonList.js","App.js","reportWebVitals.js","index.js"],"names":["GET_POKEMONS_LIST","gql","PokemonList","useQuery","variables","loading","error","data","message","name","css","pokemons","results","map","pokemon","to","src","image","id","GET_POKEMON_DETAIL","PokemonDetail","myPokemon","handleSetMyPokemon","useState","nickname","setNickname","showModal","setShowmodal","useParams","sprites","front_default","moves","filter","_","i","move","types","type","onClick","Math","random","alert","className","style","display","htmlFor","value","onChange","e","target","preventDefault","console","log","length","MyPokemonList","handleRemovePokemon","client","ApolloClient","uri","cache","InMemoryCache","App","setMyPokemon","exact","path","component","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cc1d919.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\r\n\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { css } from '@emotion/react'\r\n\r\nconst GET_POKEMONS_LIST = gql`\r\n  query pokemons($limit: Int, $offset: Int) {\r\n    pokemons(limit: $limit, offset: $offset) {\r\n      count\r\n      next\r\n      previous\r\n      nextOffset\r\n      prevOffset\r\n      status\r\n      message\r\n      results {\r\n        id\r\n        url\r\n        name\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst PokemonList = ({ }) => {\r\n  const { loading, error, data } = useQuery(GET_POKEMONS_LIST, {\r\n    variables: {\r\n      \"limit\": 21,\r\n      \"offset\": 0\r\n    }\r\n  });\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <div name=\"pokemon\" css={css`\r\n      display: grid;\r\n      grid-template-columns: auto auto auto;\r\n    `}>\r\n      {data.pokemons.results.map(pokemon => (\r\n        <Link to={`pokemon/${pokemon.name}`} key={pokemon.id} css={css`\r\n          text-decoration: none;\r\n        `}\r\n        >\r\n          <img src={pokemon.image} css={css`\r\n\r\n          `} />\r\n          <span to={`pokemon/${pokemon.name}`} css={css`\r\n            text-transform: capitalize;\r\n            color: black;\r\n            display: block;\r\n          `}>\r\n            {pokemon.name}\r\n          </span>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonList;\r\n","/** @jsxImportSource @emotion/react */\r\n\r\nimport React, { useState } from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { useParams } from \"react-router\";\r\nimport { css } from '@emotion/react'\r\n\r\nconst GET_POKEMON_DETAIL = gql`\r\n  query pokemon($name: String!) {\r\n    pokemon(name: $name) {\r\n      id\r\n      name\r\n      sprites {\r\n        front_default\r\n      }\r\n      moves {\r\n        move {\r\n          name\r\n        }\r\n      }\r\n      types {\r\n        type {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst PokemonDetail = ({ myPokemon, handleSetMyPokemon }) => {\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const [showModal, setShowmodal] = useState(false);\r\n\r\n  const handleCatch = () => {\r\n    const rand = Math.random();\r\n    if (rand > 0.5) {\r\n      alert(\"Catched\");\r\n      setShowmodal(true);\r\n    } else {\r\n      alert(\"failed\");\r\n    }\r\n  };\r\n\r\n  const handleInputText = (e) => {\r\n    setNickname(e.target.value);\r\n  };\r\n\r\n  const handleInputSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(myPokemon.filter(pokemon => pokemon === nickname).length);\r\n    if (myPokemon.filter(pokemon => pokemon === nickname).length > 0) {\r\n      setNickname(\"\");\r\n      alert(\"Nickname already used.\");\r\n    } else {\r\n      handleSetMyPokemon(nickname);\r\n      setNickname(\"\");\r\n      setShowmodal(false);\r\n    }\r\n  };\r\n\r\n  let { name } = useParams();\r\n\r\n  const { loading, error, data } = useQuery(GET_POKEMON_DETAIL, {\r\n    variables: {\r\n      \"name\": name,\r\n    }\r\n  });\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <div>\r\n      <div css={css`\r\n        padding: 1rem;\r\n      `}>\r\n        <span css={css`\r\n        display: block;\r\n        text-transform: capitalize;\r\n        font-size: 2rem;\r\n      `}>\r\n          {data.pokemon.name}\r\n        </span>\r\n        <img src={data.pokemon.sprites.front_default} />\r\n      </div>\r\n\r\n      <div css={css`\r\n        padding: 1rem;\r\n      `}>\r\n        <span css={css`\r\n          text-align: left;\r\n          font-size: 1.5rem;\r\n        `}>\r\n          Moves:\r\n        </span>\r\n        <div css={css`\r\n          display: grid;\r\n          grid-template-columns: repeat(3, 1fr);\r\n        `}>\r\n          {data.pokemon.moves\r\n            .filter((_, i) => {\r\n              return i <= 10;\r\n            })\r\n            .map(move => {\r\n              return <span key={move.move.name} css={css`padding: 1rem`}>{move.move.name}</span>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <div css={css`\r\n        padding: 1rem;\r\n      `}>\r\n        <span css={css`\r\n          text-align: left;\r\n          font-size: 1.5rem;\r\n        `}>\r\n          Types:\r\n        </span>\r\n        <div css={css`\r\n          display: grid;\r\n          grid-template-columns: repeat(3, 1fr);\r\n        `}>\r\n          {data.pokemon.types\r\n            .map(type => {\r\n              return <span key={type.type.name} css={css`padding: 1rem`}>{type.type.name}</span>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <button onClick={handleCatch}>Catch</button>\r\n\r\n      <div id=\"catchModal\" className=\"modal\" style={showModal ? { display: \"block\" } : { display: \"none\" }}>\r\n        <div className=\"modal-content\">\r\n          <span className=\"close\">&times;</span>\r\n          <form>\r\n            <label htmlFor=\"nickname\">Nickname: </label>\r\n            <input type=\"text\" name=\"nickname\" value={nickname} onChange={handleInputText}></input>\r\n            <input type=\"submit\" onClick={handleInputSubmit}></input>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default PokemonDetail;\r\n","const MyPokemonList = ({ myPokemon, handleRemovePokemon }) => {\r\n  const removePokemon = (e) => {\r\n    handleRemovePokemon(e);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>My Pokemon</h1>\r\n      {\r\n        myPokemon.map((pokemon) => (\r\n          <>\r\n            <h3>{pokemon}</h3>\r\n            <button onClick={() => removePokemon(pokemon)}>-</button>\r\n          </>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPokemonList;\r\n","/** @jsxImportSource @emotion/react */\n\nimport React, { useState } from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { css } from '@emotion/react'\nimport PokemonList from './PokemonList';\nimport PokemonDetail from './PokemonDetail';\nimport MyPokemonList from './MyPokemonList';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokeapi.vercel.app/api/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [myPokemon, setMyPokemon] = useState([]);\n\n  const handleSetMyPokemon = (nickname) => {\n    setMyPokemon([...myPokemon, nickname]);\n  }\n\n  const handleRemovePokemon = (nickname) => {\n    setMyPokemon([...myPokemon.filter(pokemon => pokemon !== nickname)]);\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\" css={css`\n        background-color: white;\n        height: 100vh;\n        width: 500px;\n        text-align: center;\n        margin: 0 auto;\n      `}>\n        <nav css={css`\n          height: 50px;\n          margin: 0 auto;\n          background-color: #F1F1F1;\n          position: relative;\n          font-size: 17px;\n          text-transform: uppercase;\n        `}>\n          <Link to=\"/pokemons\" css={css`\n              display: inline-block;\n              float: left;\n              text-decoration: none;\n            `}>\n            POKEMON\n          </Link>\n          <Link to=\"/mypokemon\" css={css`\n              display: inline-block;\n              float: right;\n              text-decoration: none;\n            `}>\n            MY POKEMON\n          </Link>\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/pokemons\" component={PokemonList} />\n          <Route path=\"/pokemon/:name\" render={() => (\n            <PokemonDetail myPokemon={myPokemon} handleSetMyPokemon={handleSetMyPokemon} />\n          )} />\n          <Route path=\"/mypokemon\" render={() => (\n            <MyPokemonList myPokemon={myPokemon} handleRemovePokemon={handleRemovePokemon} />\n          )} />\n        </Switch>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}